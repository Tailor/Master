// MasterRouter  
// version 1.0.14.1

var url = require('url');
var app = require('mastercontroller');
var path = require('path');
var fileserver = require('fs');
var qs = require('querystring');
var busboy = require('busboy');

( function( global, factory ) {

    "use strict";

    if ( typeof module === "object" && typeof module.exports === "object" ) {
        module.exports = factory( global );
    } else {
        factory( global );
    }

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
    
    var mimeTypes = [];
    var errorObj = [];
    var store = {};
    var MasterRouter = {
        store : store,
        _routeList :[],
        _controllerModal :{
            namespace : "",
            action: "",
            type: "",
            func : ""
        },
        addToStore :function(name, data){
            this.store[name] = data;
        },
        addMimeType: function(mimeObject){
            if(mimeObject !== null && mimeObject !== undefined){
                mimeTypes.push(mimeObject);
            }
        },
        status: function(statusCode, location){
            errorObj.push({
                code: statusCode,
                route : location 
            });
        },
        mergingObjectLiteral: function() {
          var o = {}
          for (var i = arguments.length - 1; i >= 0; i --) {
            var s = arguments[i]
            for (var k in s) o[k] = s[k]
          }
          return o
        },
        findMimeType : function(fileExtention){
            if(fileExtention !== null && fileExtention !== undefined && fileExtention !== ""){
                var type = undefined;

                for(var i in mimeTypes) {
                    if(mimeTypes[i][fileExtention] !== undefined){
                        type = mimeTypes[i][fileExtention];
                    }
                }
                if(type === undefined){
                    return false;
                }
                else{
                    return type;
                }
            }
            else{
                return false;
            }
        },
        _convertArrayToObject : function(obj, keyPath, value) {
           lastKeyIndex = keyPath.length-1;
           for (var i = 0; i < lastKeyIndex; ++ i) {
             key = keyPath[i];
             if (!(key in obj))
               obj[key] = {}
             obj = obj[key];
           }
           obj[keyPath[lastKeyIndex]] = value;
        },
        _getRoutes : function(path){
                    const uri = path.replace(/^\/|\/$/g, '');
                    const uriArray = uri.split("/");

                    return arrayURI = {
                        action: uriArray.pop(),
                        namespace : uriArray
                    }

                },
            // at this point have the path, controler, and action names
        _digestRoute : function(model, scope, route) {

            // model exmaple = { namespace: "", name: "", type: ""} 
            // find route accociated with controller and action

            if(route === undefined){
                route = this._findRoute(model);
            }
            // not found
            if(model !== undefined){
                    // TODO: if no routes found then just call regular routes and default to get
                    app._call(model, scope);

                    return {
                        controller :model
                    }
                }
        },

        // find the route associated with controller, action and type
        _findRoute : function(model){
            // route
            // path, toPath, type

            var path = model.action === "" ? model.namespace.join("/") : model.namespace.join("/") + "/" + model.action;
            var fullUrl = [];
            var params = {};

            // loop through routes
            for(var item in this._routeList){

                var routeItem = this._routeList[item];
                var routeInnerList = routeItem.path.split("/");
                var pathList = path.split("/");

                // build the urls
                if(routeInnerList.length > 0){
                    
                    for(var l in routeInnerList){
                        
                        if(routeInnerList[l].indexOf(":") > -1){
                            var index = l - 1;
                            var routeName = routeInnerList[l].replace(/:/g , '');
                            
                            routeInnerList[l] = pathList[index];
                            params[routeName] = pathList[index];
                        }
                    }
                }
               
                // pages/:id/edit
                var routePathCleaned = routeInnerList.join().replace(/^\/|\/$/g, '').replace(/,/g , '');
                // pages/5ff/edit
                var pathCleaned = pathList.join().replace(/^\/|\/$/g, '').replace(/,/g , '');

                var routeType = routeItem.type.toLowerCase();
                var type = model.type.toLowerCase();

                // check regular routes
                if(routePathCleaned === pathCleaned && routeType === type){
                    return {"route": routeItem, "params" : params };
                }
            };

            return null;
        },
        route : function(path, toPath, type){

                var route = {
                    type: type.toLowerCase(),
                    path: path,
                    toPath :toPath
                };

                this._routeList.push(route);
        },
        routeResources : function(routeName){

                var routeList = [];
                var that = this;
                routeList.push({
                    type: "get",
                    path: "/" + routeName,
                    toPath :"/" + routeName + "/index"
                });

                routeList.push({
                    type: "get",
                    path: "/" + routeName + "/new",
                    toPath :"/" + routeName + "/new"
                });

                routeList.push({
                    type: "post",
                    path: "/" + routeName,
                    toPath :"/" + routeName + "/create"
                });

                routeList.push({
                    // pages/3
                    type: "get",
                    path: "/" + routeName + "/:id",
                    toPath :"/" + routeName + "/show"
                });

                routeList.push({
                    type: "get",
                    path: "/" + routeName + "/:id/" + "edit",
                    toPath :"/" + routeName + "/edit"
                });

                routeList.push({
                    type: "put",
                    path: "/" + routeName + "/:id",
                    toPath :"/" + routeName + "/update"
                });

                routeList.push({
                    type: "delete",
                    path: "/" + routeName + "/:id",
                    toPath :"/" + routeName + "/destroy"
                });

                routeList.forEach(function(obj){
                    that._routeList.push(obj);
                });

                
        },
        node : function(request, response, baseUrl) {
                // node stuff
                request.requrl = url.parse(request.url, true);

                // test if request is a css file using regular expression
                if (/.(css)$/.test(request.requrl)) {
                    
                    response.writeHead(200, {
                      'Content-Type': 'text/css'
                    });
                    
                    // get css file
                    fileserver.readFile(__dirname + request.requrl, 'utf8', function(err, data) {
                      if (err) throw err;
                      response.write(data, 'utf8');
                      response.end();
                    });

                }
                else{
                    var that = this;
                    try {

                        var requestRoutes = that._getRoutes(request.requrl.pathname);
                        var type = request.method.toLowerCase();

                        var findRoute = that._findRoute({ namespace : requestRoutes.namespace, action: requestRoutes.action, type: type });

                        var routeObj = {
                            namespace: "home",
                            action: "index",
                            type :"get"
                        }

                        if (findRoute !== null) {
                            var routes = this._getRoutes(findRoute.route.toPath);
                               
                            routeObj.namespace = routes.namespace.join().toLowerCase();
                            routeObj.action = routes.action.toLowerCase();
                            routeObj.type = findRoute.route.type.toLowerCase();

                        }
                        else{

                            if(requestRoutes !== undefined){

                                if(requestRoutes.action !== ""){
                                       routeObj.name = requestRoutes.action;
                                }
                                if(requestRoutes.namespace !== ""){
                                    routeObj.namespace = requestRoutes.namespace;
                                }
                            }

                            routeObj.type = type;
                        }
                                        
                        // require the controller
                        require(baseUrl + "/app/controllers/" + routeObj.namespace + "_controller");

                        var params = findRoute.params;

                         // routing get data sent through request
                        if(routeObj.type === "get"){

                            var parsedURL = url.parse(request.requrl, true);
                            var query = parsedURL.query;
                            params = that.mergingObjectLiteral(params, query);

                            that._digestRoute(routeObj, {request : request, response: response, params : params}, findRoute.route);
                            
                        }

                        // routing Post data sent through request
                        if (routeObj.type === "post" || routeObj.type === "put") {
                            
                            var body = {};
                            body.files = [];

                            var form = new busboy({ headers: request.headers });

                            form.on('field', function(fieldname, val, fieldnameTruncated, valTruncated) {

                                // add reg ex to turn string into array then loop
                                // TODO: slow need a faster way
                                var dotNotation = fieldname.replace(/[\[\]']+/g,',').replace(/,\s*$/, "").split(",");
                                that._convertArrayToObject(body, dotNotation, val);
                               
                            });

                            form.on('file', function(fieldname, file, filename, encoding, mimetype) {

                                if(body.files){
                                    body.files.push({
                                        fieldname : fieldname,
                                        file : file,
                                        filename : filename,
                                         mimetype :  mimetype
                                    });
                                }

                            });

                            request.pipe(form);
                         
                            request.on('end', function () {
                                //console.log("body", body);
                                //var query = qs.parse(body);
                                params = that.mergingObjectLiteral(params, body);
                                
                                that._digestRoute(routeObj, {request : request, response: response, params : params}, findRoute.route);
                                
                            });
                        }
                        
                        //response.end();
                    }
                    catch (ex) {

                        if(ex.message.includes("Cannot find module")){
                            // if any other error besides 404 
                            console.log(ex.message);
                            fileserver.readFile(baseUrl + "/public/404.html", function (err, html) {
                                if (err) {
                                    // LOG THE FUCKING ERROR
                                }
                                response.writeHead(200, {'Content-Type': 'text/html'});
                                response.write(html, 'utf8');
                                response.end();
                            });
                        }
                        else{
                            console.log(ex.message);
                            // if any other error besides 404 
                            fileserver.readFile(baseUrl + "/public/500.html", function (err, html) {
                                if (err) {
                                    // LOG THE FUCKING ERROR
                                }
                                response.writeHead(200, {'Content-Type': 'text/html'});
                                response.write(html, 'utf8');
                                response.end();
                            }); 
                        }
                      }
                }

        }
    };
    return MasterRouter;

});
