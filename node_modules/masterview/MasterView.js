// MasterView - by Alexander Batista - Tailer 2017 - MIT Licensed 
// version 1.0.11.7 - beta -- node compatiable

var app = require('mastercontroller');
var appRouter = require('masterrouter');
var fileserver = require('fs');
var ejs = require('ejs');
var fs = require('fs');


( function( global, factory ) {

    "use strict";

    if ( typeof module === "object" && typeof module.exports === "object" ) {
        module.exports = factory( global );
    } else {
        factory( global );
    }

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

		var MasterView = {};
		var styles = [];
		var js = [];
		var htmlHelper = {};
		var currentParams;

       	htmlHelper.addStyles = function(location){

			if(Array.isArray(location) === true){
				for(var i in location){
					styles.push(location[i]);
				}
			}
			else{
				styles.push(location);
			}
       	};

       	// add list of script tags
       	htmlHelper.addJS = function(location){
			if(Array.isArray(location) === true){
				for(var i in location){
					js.push(location[i]);
				}
			}
			else{
				js.push(location);
			}
       	};

       	       	// render all your link tags styles
       	htmlHelper.addFolderStyles = function(name , typeArray){

       		var styleFolder = MasterView.baseUrl + '/app/assets/stylesheets/';
       		var styleLocation = "/app/assets/stylesheets/";
			var type = typeArray === undefined ? ["css"] : typeArray;

       		if(name !== undefined && name !== ""){
	       		styleFolder = styleFolder + name;
	       		styleLocation = styleLocation + name + "/";
			}

			fs.readdirSync(styleFolder).forEach(function(file){

				var fileExtension = file.replace(/^.*\./, '');
				if(type.indexOf(fileExtension) >= 0){
			    	styles.push(styleLocation + file);
			    }

			  });
       	};
		

       	htmlHelper.addFolderJS = function(name, typeArray){

			var jsFolder = MasterView.baseUrl + '/app/assets/javascripts/';
			var jsLocation = '/app/assets/javascripts/';
			var type = typeArray === undefined ? ["js"] : typeArray;

       		if(name !== undefined && name !== ""){
	       		jsFolder = jsFolder + name;
	       		jsLocation = jsLocation + name + "/";
			}

		 	fs.readdirSync(jsFolder).forEach(function(file){

				var fileExtension = file.replace(/^.*\./, '');
				if(type.indexOf(fileExtension) >= 0){
					js.push(jsLocation + file);
				}
		   });
       	};

       	// render all your link tags styles
       	htmlHelper.renderStyles = function(){

			var htmlStyles = [];
			for(var i in styles){
				if(styles[i].location !== undefined && styles[i].type !== undefined){
					htmlStyles.push('<link rel="stylesheet" type="' + styles[i].type + '" href="' + styles[i].location + '">');
				}else{
					htmlStyles.push('<link rel="stylesheet" type="text/css" href="' + styles[i] + '">');
				}
			}

       		var partialView =  ejs.render(htmlStyles.join(""));
			return partialView;
       	};
		
		// render all your JS script tags
		htmlHelper.renderJS = function(){

			var htmljs = [];
			for(var i in js){
				if(js[i].location !== undefined && js[i].type !== undefined){
					htmljs.push('<script type="' + js[i].type  + '" src="' + js[i].location + '"></script>');
				}else{
					htmljs.push('<script type="text/javascript" src="' + js[i] + '"></script>');
				}	
			}
       		var partialView =  ejs.render(htmljs.join(""));
			return partialView;
	
       	};

       		           	// render partial views
	    htmlHelper.render = function(path, data){
	    	var params = (data === undefined) ? currentParams : data;

			var partialViewUrl = "/app/views/" + path;
			var filepartialView = fileserver.readFileSync(MasterView.baseUrl + partialViewUrl, 'utf8');

       		var partialView =  ejs.render(filepartialView, params);
			return partialView;
	
       	};

		MasterView.load = function(request, response, baseUrl, callback){
	        this.request = request;
	        this.response = response
	        this.baseUrl = baseUrl;
	        this.callback = callback;
		};

		MasterView.html = {};

		MasterView.html.addJS = function(location){
			htmlHelper.addJS(location);
		};

		MasterView.html.addStyles = function(location){
			htmlHelper.addStyles(location);
		};

		MasterView.html.addFolderJS = function(name, typeArray){
			htmlHelper.addFolderJS(name, typeArray);
		};

		MasterView.html.addFolderStyles = function(name, typeArray){
			htmlHelper.addFolderStyles(name, typeArray);
		};

		// location starts from the view folder. Ex: partialViews/fileName.html
		MasterView.returnPartialView = function(data, location, callBack){
			var that = this;
			var actionView = "/app/views/" + location;

			var getAction = fileserver.readFileSync(appRoot + actionView, 'utf8');
	        var ActionHtml = ejs.render(getAction, data);
	        return ActionHtml;
		};

		// redirects to another controller =  does not reload the page
		MasterView.redirectTo = function(url){
			this.response.writeHead(302, {
				'Location': url
				//add other headers here...
			  });
			  this.response.end();
		};

		// redirects to another controller =  does not reload the page
		MasterView.redirectToController = function(data, controllerName, nameSpace, name, type){
			require(this.baseUrl + "/app/controllers/" + controllerName + "_controller");
			
			var routeObj = {
				namespace: nameSpace,
				action: name,
				type : type
			};

			appRouter._digestRoute(routeObj, {request : this.request, response: this.response, params : data});
		};

		// redirects to another action inside the same controller = does not reload the page
		MasterView.redirectToAction = function(data, nameSpace, name, type){
			var routeObj = {
				namespace: nameSpace,
				action: name,
				type : type
			};

			appRouter._digestRoute(routeObj, {request : this.request, response: this.response, params : data});
		};
		
		// this will allow static pages without master view
		MasterView.returnWithOutMaster = function(data, location){

			var that = this;
			var requestRoutes = appRouter._getRoutes(that.request.requrl.pathname);
	        var type = this.request.method.toLowerCase();
	        var getRoute = appRouter._findRoute({ namespace : requestRoutes.namespace, action: requestRoutes.action, type: type });

	        var routeObj = {
	            namespace: "home",
	            action: "index",
	            type :"get"
	        }

		    if (getRoute !== null) {
		    		var routes = appRouter._getRoutes(getRoute.route.toPath);

		            routeObj.namespace = routes.namespace.join().toLowerCase();
		            routeObj.action = routes.action.toLowerCase();
		            routeObj.type = getRoute.route.type.toLowerCase();
		    }
		    else{

                if(requestRoutes !== undefined){

                    if(requestRoutes.action !== ""){
                           routeObj.name = requestRoutes.action;
                    }
                    if(requestRoutes.namespace !== ""){
                        routeObj.namespace = requestRoutes.namespace;
                    }
                }

                routeObj.type = type;
		    }

			var actionView = null;

		    if(location === undefined){
				actionView = "/app/views/" +  routeObj.namespace + "/" +   routeObj.action + ".html";
		    }
		    else{
		    	actionView = "/app/views/" + location;
		    }

			

			fileserver.readFile(appRoot + actionView, 'utf8', function(err, actionview) {

	           	if (err) throw err;
	            var ActionHtml = ejs.render(actionview, data);
	            
			             // send to server
			    that.response.writeHead(200, {'Content-Type': 'text/html'});
			    that.response.end(ActionHtml);

			});

		};

		MasterView.returnView = function(data, location){

			// add html object to data
			data.html = htmlHelper
			currentParams = data;
			var that = this;
			var requestRoutes = appRouter._getRoutes(that.request.requrl.pathname);
	        var type = this.request.method.toLowerCase();
	        var getRoute = appRouter._findRoute({ namespace : requestRoutes.namespace, action: requestRoutes.action, type: type });

	        var routeObj = {
	            namespace: "home",
	            action: "index",
	            type :"get"
	        }

		    if (getRoute !== null) {
		    		var routes = appRouter._getRoutes(getRoute.route.toPath);

		            routeObj.namespace = routes.namespace.join().toLowerCase();
		            routeObj.action = routes.action.toLowerCase();
		            routeObj.type = getRoute.route.type.toLowerCase();
		    }
		    else{

                if(requestRoutes !== undefined){

                    if(requestRoutes.action !== ""){
                           routeObj.name = requestRoutes.action;
                    }
                    if(requestRoutes.namespace !== ""){
                        routeObj.namespace = requestRoutes.namespace;
                    }
                }

                routeObj.type = type;
		    }

			var actionView = null;

		    if(location === undefined){
				actionView = "/app/views/" +  routeObj.namespace + "/" +   routeObj.action + ".html";
		    }
		    else{
		    	actionView = "/app/views/" + location;
		    }

			var masterView = "/app/views/layout/master.html";


			fileserver.readFile(that.baseUrl + actionView, 'utf8', function(err, actionview) {

	           	if (err) throw err;

	           	// declare all helper classes you want to show up 
	           	MasterView.html = {};
	           	MasterView.html.addStyles = data.html.addStyles;
				MasterView.html.addJS = data.html.addJS;
				MasterView.html.addFolderStyles = data.html.addFolderStyles;
				MasterView.html.addFolderJS = data.html.addFolderJS;

	            var ActionHtml = ejs.render(actionview, data);
	            
	            fileserver.readFile(that.baseUrl + masterView, 'utf8', function(err, masterview) {

		        	if (err) throw err;
		        	data.yield = ActionHtml
		        	
		            var MasterHtml = ejs.render(masterview,data);
			             // send to server
			        that.response.writeHead(200, {'Content-Type': 'text/html'});
			        that.response.end(MasterHtml);

	        	});

			});
		};


		return MasterView;
});


